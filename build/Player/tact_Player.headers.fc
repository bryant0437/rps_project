;;
;; Header files for Player
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_crc16
(slice) __tact_crc16(slice data) inline_ref;

;; __tact_base64_encode
(slice) __tact_base64_encode(slice data) inline_ref;

;; __tact_address_to_user_friendly
(slice) __tact_address_to_user_friendly(slice address) inline_ref;

;; __tact_debug_address
() __tact_debug_address(slice address, slice debug_print_1, slice debug_print_2) impure inline_ref;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_slice_cell
(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline;

;; __tact_dict_get_slice_cell
cell __tact_dict_get_slice_cell(cell d, int kl, slice k) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $Info$_store
builder $Info$_store(builder build_0, (int, int) v) inline;

;; $Info$_store_cell
cell $Info$_store_cell((int, int) v) inline;

;; $Info$_load
(slice, ((int, int))) $Info$_load(slice sc_0) inline;

;; $Info$_as_optional
tuple $Info$_as_optional((int, int) v) inline;

;; $Info$_load_opt
tuple $Info$_load_opt(cell cl) inline;

;; $RegPlayer$_load
(slice, ((slice))) $RegPlayer$_load(slice sc_0) inline;

;; $AddWinLoss$_load
(slice, ((slice, slice, slice))) $AddWinLoss$_load(slice sc_0) inline;

;; $Player$_store
builder $Player$_store(builder build_0, (int, cell) v) inline;

;; $Player$_load
(slice, ((int, cell))) $Player$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Info$_get_wins
_ $Info$_get_wins((int, int) v) inline;

;; $Info$_get_losses
_ $Info$_get_losses((int, int) v) inline;

;; $Info$_not_null
((int, int)) $Info$_not_null(tuple v) inline;

;; $Info$_to_tuple
tuple $Info$_to_tuple(((int, int)) v) inline;

;; $Info$_to_opt_tuple
tuple $Info$_to_opt_tuple(tuple v) inline;

;; $Info$_to_opt_external
tuple $Info$_to_opt_external(tuple v) inline;

;; $Player$init$_load
(slice, ((int))) $Player$init$_load(slice sc_0) inline;

;; $Player$_contract_init
(int, cell) $Player$_contract_init(int $id) impure inline_ref;

;; $Player$_contract_load
(int, cell) $Player$_contract_load() impure inline_ref;

;; $Player$_contract_store
() $Player$_contract_store((int, cell) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Info$_constructor_wins_losses
((int, int)) $Info$_constructor_wins_losses(int $wins, int $losses) inline;

;; $Player$_fun_addWin
((int, cell), ()) $Player$_fun_addWin((int, cell) $self, slice $playerAddr) impure inline_ref;

;; $Player$_fun_addLoss
((int, cell), ()) $Player$_fun_addLoss((int, cell) $self, slice $playerAddr) impure inline_ref;

;; $Player$_fun_id
((int, cell), int) $Player$_fun_id((int, cell) $self) impure inline_ref;

;; $Player$_fun_getPlayerInfo
((int, cell), tuple) $Player$_fun_getPlayerInfo((int, cell) $self, slice $playerAddr) impure inline_ref;

;; $Player$_fun_getWins
((int, cell), int) $Player$_fun_getWins((int, cell) $self, slice $playerAddr) impure inline_ref;

;; $Player$_fun_getLosses
((int, cell), int) $Player$_fun_getLosses((int, cell) $self, slice $playerAddr) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $Player$_fun_forward
((int, cell), ()) $Player$_fun_forward((int, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Player$_fun_notify
((int, cell), ()) $Player$_fun_notify((int, cell) $self, cell $body) impure inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;
