;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($bounce, $to, $value, $mode, $body, $code, $data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: Info
;; TLB: _ wins:uint256 losses:uint256 = Info
;;

builder $Info$_store(builder build_0, (int, int) v) inline {
    var (v'wins, v'losses) = v;
    build_0 = build_0.store_uint(v'wins, 256);
    build_0 = build_0.store_uint(v'losses, 256);
    return build_0;
}

cell $Info$_store_cell((int, int) v) inline {
    return $Info$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int))) $Info$_load(slice sc_0) inline {
    var v'wins = sc_0~load_uint(256);
    var v'losses = sc_0~load_uint(256);
    return (sc_0, (v'wins, v'losses));
}

tuple $Info$_as_optional((int, int) v) inline {
    var (v'wins, v'losses) = v;
    return __tact_tuple_create_2(v'wins, v'losses);
}

tuple $Info$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $Info$_as_optional(sc~$Info$_load());
}

_ $Info$_get_wins((int, int) v) inline {
    var (v'wins, v'losses) = v;
    return v'wins;
}

_ $Info$_get_losses((int, int) v) inline {
    var (v'wins, v'losses) = v;
    return v'losses;
}

((int, int)) $Info$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'wins, int vvv'losses) = __tact_tuple_destroy_2(v);
    return (vvv'wins, vvv'losses);
}

tuple $Info$_to_tuple(((int, int)) v) inline {
    var (v'wins, v'losses) = v;
    return __tact_tuple_create_2(v'wins, v'losses);
}

tuple $Info$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $Info$_to_tuple($Info$_not_null(v)); 
}

tuple $Info$_to_opt_external(tuple v) inline {
    var loaded = $Info$_to_opt_tuple(v);
    if (null?(loaded)) {
        return null();
    } else {
        return (loaded);
    }
}

((int, int)) $Info$_constructor_wins_losses(int $wins, int $losses) inline {
    return ($wins, $losses);
}

;;
;; Type: RegPlayer
;; Header: 0x6f215451
;; TLB: reg_player#6f215451 playerAddr:address = RegPlayer
;;

(slice, ((slice))) $RegPlayer$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1864455249);
    var v'playerAddr = sc_0~__tact_load_address();
    return (sc_0, (v'playerAddr));
}

;;
;; Type: AddWinLoss
;; Header: 0x686d81ca
;; TLB: add_win_loss#686d81ca p1Addr:address p2Addr:address winnerAddr:address = AddWinLoss
;;

(slice, ((slice, slice, slice))) $AddWinLoss$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1752007114);
    var v'p1Addr = sc_0~__tact_load_address();
    var v'p2Addr = sc_0~__tact_load_address();
    var v'winnerAddr = sc_0~__tact_load_address();
    return (sc_0, (v'p1Addr, v'p2Addr, v'winnerAddr));
}

;;
;; Type: Player
;;

builder $Player$_store(builder build_0, (int, cell) v) inline {
    var (v'id, v'player) = v;
    build_0 = build_0.store_uint(v'id, 32);
    build_0 = build_0.store_dict(v'player);
    return build_0;
}

(slice, ((int, cell))) $Player$_load(slice sc_0) inline {
    var v'id = sc_0~load_uint(32);
    var v'player = sc_0~load_dict();
    return (sc_0, (v'id, v'player));
}

(slice, ((int))) $Player$init$_load(slice sc_0) inline {
    var v'id = sc_0~load_int(257);
    return (sc_0, (v'id));
}

(int, cell) $Player$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Player$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (int $id) = $sc~$Player$init$_load();
        $sc.end_parse();
        return $Player$_contract_init($id);
    }
}

() $Player$_contract_store((int, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Player$_store(b, v);
    set_data(b.end_cell());
}