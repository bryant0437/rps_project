;;
;; Header files for Game
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_load_address_opt
(slice, slice) __tact_load_address_opt(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_store_address_opt
builder __tact_store_address_opt(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_cell
(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $GameInfo$_store
builder $GameInfo$_store(builder build_0, (slice, slice, int, int, slice, int) v) inline_ref;

;; $GameInfo$_store_cell
cell $GameInfo$_store_cell((slice, slice, int, int, slice, int) v) inline;

;; $GameInfo$_load
(slice, ((slice, slice, int, int, slice, int))) $GameInfo$_load(slice sc_0) inline_ref;

;; $GameInfo$_as_optional
tuple $GameInfo$_as_optional((slice, slice, int, int, slice, int) v) inline;

;; $GameInfo$_load_opt
tuple $GameInfo$_load_opt(cell cl) inline;

;; $AssignPlayerContractAddr$_load
(slice, ((slice))) $AssignPlayerContractAddr$_load(slice sc_0) inline;

;; $NewGame$_load
(slice, ((slice, slice))) $NewGame$_load(slice sc_0) inline;

;; $SelectMove$_load
(slice, ((int, int, int))) $SelectMove$_load(slice sc_0) inline;

;; $UpdatePlayerInfo$_load
(slice, ((slice, slice, slice))) $UpdatePlayerInfo$_load(slice sc_0) inline;

;; $AddWinLoss$_store
builder $AddWinLoss$_store(builder build_0, (slice, slice, slice) v) inline;

;; $AddWinLoss$_store_cell
cell $AddWinLoss$_store_cell((slice, slice, slice) v) inline;

;; $Game$_store
builder $Game$_store(builder build_0, (slice, int, int, cell) v) inline;

;; $Game$_load
(slice, ((slice, int, int, cell))) $Game$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $GameInfo$_get_p1Addr
_ $GameInfo$_get_p1Addr((slice, slice, int, int, slice, int) v) inline;

;; $GameInfo$_get_p2Addr
_ $GameInfo$_get_p2Addr((slice, slice, int, int, slice, int) v) inline;

;; $GameInfo$_get_p1Move
_ $GameInfo$_get_p1Move((slice, slice, int, int, slice, int) v) inline;

;; $GameInfo$_get_p2Move
_ $GameInfo$_get_p2Move((slice, slice, int, int, slice, int) v) inline;

;; $GameInfo$_get_winnerAddr
_ $GameInfo$_get_winnerAddr((slice, slice, int, int, slice, int) v) inline;

;; $GameInfo$_get_status
_ $GameInfo$_get_status((slice, slice, int, int, slice, int) v) inline;

;; $GameInfo$_not_null
((slice, slice, int, int, slice, int)) $GameInfo$_not_null(tuple v) inline;

;; $GameInfo$_to_tuple
tuple $GameInfo$_to_tuple(((slice, slice, int, int, slice, int)) v) inline;

;; $GameInfo$_to_opt_tuple
tuple $GameInfo$_to_opt_tuple(tuple v) inline;

;; $GameInfo$_to_opt_external
tuple $GameInfo$_to_opt_external(tuple v) inline;

;; $Game$init$_load
(slice, ((int))) $Game$init$_load(slice sc_0) inline;

;; $Game$_contract_init
(slice, int, int, cell) $Game$_contract_init(int $id) impure inline_ref;

;; $Game$_contract_load
(slice, int, int, cell) $Game$_contract_load() impure inline_ref;

;; $Game$_contract_store
() $Game$_contract_store((slice, int, int, cell) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Game$_fun_findWinner
((slice, int, int, cell), slice) $Game$_fun_findWinner((slice, int, int, cell) $self, slice $p1Addr, slice $p2Addr, int $p1Move, int $p2Move) impure inline_ref;

;; $Game$_fun_id
((slice, int, int, cell), int) $Game$_fun_id((slice, int, int, cell) $self) impure inline_ref;

;; $Game$_fun_counter
((slice, int, int, cell), int) $Game$_fun_counter((slice, int, int, cell) $self) impure inline_ref;

;; $Game$_fun_getplayerContractAddr
((slice, int, int, cell), slice) $Game$_fun_getplayerContractAddr((slice, int, int, cell) $self) impure inline_ref;

;; $GameInfo$_constructor_p1Addr_p2Addr_p1Move_p2Move_winnerAddr_status
((slice, slice, int, int, slice, int)) $GameInfo$_constructor_p1Addr_p2Addr_p1Move_p2Move_winnerAddr_status(slice $p1Addr, slice $p2Addr, int $p1Move, int $p2Move, slice $winnerAddr, int $status) inline;

;; $Game$_fun_getGameInfo
((slice, int, int, cell), tuple) $Game$_fun_getGameInfo((slice, int, int, cell) $self, int $gameId) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $Game$_fun_forward
((slice, int, int, cell), ()) $Game$_fun_forward((slice, int, int, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Game$_fun_notify
((slice, int, int, cell), ()) $Game$_fun_notify((slice, int, int, cell) $self, cell $body) impure inline;

;; $SendParameters$_constructor_to_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline;

;; $AddWinLoss$_constructor_p1Addr_p2Addr_winnerAddr
((slice, slice, slice)) $AddWinLoss$_constructor_p1Addr_p2Addr_winnerAddr(slice $p1Addr, slice $p2Addr, slice $winnerAddr) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;
