;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline {
    return (true, $to, $value, $mode, $body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($bounce, $to, $value, $mode, $body, $code, $data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: AssignGameContractAddr
;; Header: 0x0bac087d
;; TLB: assign_game_contract_addr#0bac087d gameContractAddr:address = AssignGameContractAddr
;;

(slice, ((slice))) $AssignGameContractAddr$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 195823741);
    var v'gameContractAddr = sc_0~__tact_load_address();
    return (sc_0, (v'gameContractAddr));
}

;;
;; Type: QueuePlayer
;; Header: 0x6edce37e
;; TLB: queue_player#6edce37e playerAddr:address = QueuePlayer
;;

(slice, ((slice))) $QueuePlayer$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1859969918);
    var v'playerAddr = sc_0~__tact_load_address();
    return (sc_0, (v'playerAddr));
}

;;
;; Type: NewGame
;; Header: 0x0875cea4
;; TLB: new_game#0875cea4 p1Addr:Maybe address p2Addr:Maybe address = NewGame
;;

builder $NewGame$_store(builder build_0, (slice, slice) v) inline {
    var (v'p1Addr, v'p2Addr) = v;
    build_0 = store_uint(build_0, 141938340, 32);
    build_0 = __tact_store_address_opt(build_0, v'p1Addr);
    build_0 = __tact_store_address_opt(build_0, v'p2Addr);
    return build_0;
}

cell $NewGame$_store_cell((slice, slice) v) inline {
    return $NewGame$_store(begin_cell(), v).end_cell();
}

((slice, slice)) $NewGame$_constructor_p1Addr_p2Addr(slice $p1Addr, slice $p2Addr) inline {
    return ($p1Addr, $p2Addr);
}

;;
;; Type: Queue
;;

builder $Queue$_store(builder build_0, (int, cell, int, slice) v) inline {
    var (v'counter, v'queue, v'maxSize, v'gameContractAddr) = v;
    build_0 = build_0.store_int(v'counter, 257);
    build_0 = build_0.store_dict(v'queue);
    build_0 = build_0.store_int(v'maxSize, 257);
    build_0 = __tact_store_address(build_0, v'gameContractAddr);
    return build_0;
}

(slice, ((int, cell, int, slice))) $Queue$_load(slice sc_0) inline {
    var v'counter = sc_0~load_int(257);
    var v'queue = sc_0~load_dict();
    var v'maxSize = sc_0~load_int(257);
    var v'gameContractAddr = sc_0~__tact_load_address();
    return (sc_0, (v'counter, v'queue, v'maxSize, v'gameContractAddr));
}

(int, cell, int, slice) $Queue$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Queue$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $Queue$_contract_init();
    }
}

() $Queue$_contract_store((int, cell, int, slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Queue$_store(b, v);
    set_data(b.end_cell());
}