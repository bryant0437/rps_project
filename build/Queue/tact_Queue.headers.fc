;;
;; Header files for Queue
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_store_address_opt
builder __tact_store_address_opt(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_slice
(cell, ()) __tact_dict_set_int_slice(cell d, int kl, int k, slice v) inline;

;; __tact_dict_get_int_slice
slice __tact_dict_get_int_slice(cell d, int kl, int k) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $AssignGameContractAddr$_load
(slice, ((slice))) $AssignGameContractAddr$_load(slice sc_0) inline;

;; $QueuePlayer$_load
(slice, ((slice))) $QueuePlayer$_load(slice sc_0) inline;

;; $NewGame$_store
builder $NewGame$_store(builder build_0, (slice, slice) v) inline;

;; $NewGame$_store_cell
cell $NewGame$_store_cell((slice, slice) v) inline;

;; $Queue$_store
builder $Queue$_store(builder build_0, (int, cell, int, slice) v) inline;

;; $Queue$_load
(slice, ((int, cell, int, slice))) $Queue$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Queue$_contract_init
(int, cell, int, slice) $Queue$_contract_init() impure inline_ref;

;; $Queue$_contract_load
(int, cell, int, slice) $Queue$_contract_load() impure inline_ref;

;; $Queue$_contract_store
() $Queue$_contract_store((int, cell, int, slice) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Queue$_fun_isMax
((int, cell, int, slice), int) $Queue$_fun_isMax((int, cell, int, slice) $self) impure inline_ref;

;; $Queue$_fun_isMatch
((int, cell, int, slice), int) $Queue$_fun_isMatch((int, cell, int, slice) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline;

;; $NewGame$_constructor_p1Addr_p2Addr
((slice, slice)) $NewGame$_constructor_p1Addr_p2Addr(slice $p1Addr, slice $p2Addr) inline;

;; $Queue$_fun_StartNewGame
((int, cell, int, slice), ()) $Queue$_fun_StartNewGame((int, cell, int, slice) $self, slice $p1Addr, slice $p2Addr) impure inline_ref;

;; $Queue$_fun_getGameContractAddr
((int, cell, int, slice), slice) $Queue$_fun_getGameContractAddr((int, cell, int, slice) $self) impure inline_ref;

;; $Queue$_fun_Queue
((int, cell, int, slice), cell) $Queue$_fun_Queue((int, cell, int, slice) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $Queue$_fun_forward
((int, cell, int, slice), ()) $Queue$_fun_forward((int, cell, int, slice) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Queue$_fun_notify
((int, cell, int, slice), ()) $Queue$_fun_notify((int, cell, int, slice) $self, cell $body) impure inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;
